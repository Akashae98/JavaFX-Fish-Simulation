/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.animacionpecera;

import java.net.HttpURLConnection;
import java.net.URL;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;


/**
 Provides real-time quantum random numbers generated by measuring vacuum fluctuations 
 at the Australian National University (ANU) laboratory.
 * 
 Numbers are generated through photon detection by the quantum uncertainty principle
 of Heisenberg, to obtain real unpredictable values. 
 The API delivers 16-bit integers (0-65535) in JSON format, which can be
 normalized to floating-point values in the range [0,1) by dividing by 65536.0.
 * 
 API documentation: https://qrng.anu.edu.au/contact/api-documentation/
 */

public class QuantumRandom {
    
   private static Queue<Double> cache = new LinkedList<>();
   
    public static double getQuantumDouble() throws Exception {
      if (cache.isEmpty()) {
          URL url = new URL("https://qrng.anu.edu.au/API/jsonI.php?length=300&type=uint16");
          HttpURLConnection connection = (HttpURLConnection) url.openConnection();
          connection.setRequestMethod("GET");
          
          Scanner sc = new Scanner(connection.getInputStream());
          String response = sc.useDelimiter("\\A").next();
          sc.close();
          
          // Parsing JSON in data section
          String dataSection = response.substring(response.indexOf("[") + 1, response.indexOf("]"));
          String[] numbers = dataSection.split(",");
          
          for (String num : numbers) {
              int value = Integer.parseInt(num.trim());
              //to convert to double, 65536.0 its the maximum of uint16
              cache.offer(value / 65536.0);
          }
      }
      return cache.poll();//returns and removes the first element
  }
  
  public static Position getQuantumRandomPoint(int width, int height) throws Exception {
      double x = getQuantumDouble() * (width - 40);
      double y = getQuantumDouble() * (height - 40);
      return new Position(x, y);
  }
}
